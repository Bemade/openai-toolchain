name: Bump Version

on:
  push:
    branches: [main]
    paths:
      - "openai_toolchain/**"
      - "pyproject.toml"
      - "setup.py"
      - "setup.cfg"
      - ".bumpversion.cfg"
  workflow_dispatch:
    inputs:
      bump_type:
        description: "Version bump type (major/minor/patch)"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch

permissions:
  contents: write
  pull-requests: write

jobs:
  bump-version:
    name: Bump version and create release PR
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install bump2version
        run: |
          python -m pip install --upgrade pip
          pip install bump2version

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Bump version
        id: bump_version
        run: |
          # Get current version from pyproject.toml
          CURRENT_VERSION=$(grep -m 1 "version =" pyproject.toml | cut -d'"' -f2)
          echo "Current version: $CURRENT_VERSION"

          # Use the bump type from workflow input or default to patch
          BUMP_TYPE="${{ github.event.inputs.bump_type || 'patch' }}"
          echo "Bumping $BUMP_TYPE version"

          bump2version --current-version $CURRENT_VERSION $BUMP_TYPE \
            --message 'Bump version: {current_version} â†’ {new_version} [skip ci]' \
            --tag --tag-name 'v{new_version}' \
            pyproject.toml

          # Get the new version
          NEW_VERSION=$(grep -m 1 "version =" pyproject.toml | cut -d'"' -f2)
          echo "New version: $NEW_VERSION"

          # Set output for next steps
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "::set-output name=new_version::$NEW_VERSION"

      - name: Push changes
        run: |
          git push origin main
          git push --tags

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: success()
        with:
          name: "v${{ env.NEW_VERSION }}"
          tag_name: "v${{ env.NEW_VERSION }}"
          generate_release_notes: true
          draft: false
          prerelease: false
